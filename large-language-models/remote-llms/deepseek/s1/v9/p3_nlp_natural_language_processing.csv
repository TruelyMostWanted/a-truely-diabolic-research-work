Keyword,Category,Description,RelevantScrumEntities
Requirement Extraction,Data Ingestion,Automatically scraping and extracting potential user stories, features, and bugs from diverse sources like emails, support tickets, forum posts, and meeting transcripts.,Product Backlog, Product Owner
Text Classification,Categorization,Classifying incoming requirements into predefined categories such as "New Feature," "Bug," "Technical Debt," or "Epic." This enables automatic routing and prioritization.,Product Backlog, Product Owner
Topic Modeling,Analysis,Identifying overarching themes and topics within a large, unstructured backlog. Helps in discovering related user stories and organizing them into epics or themes.,Product Backlog, Product Owner, Epic
Sentiment Analysis,Prioritization,Analyzing user feedback text (e.g., in support tickets or app reviews) to gauge user frustration or desire. A highly negative sentiment score can signal a high-priority bug or fix.,Product Backlog, Product Owner, Sprint Goal
Named Entity Recognition (NER),Structuring,Identifying and extracting key entities within a user story, such as actors ("user," "admin"), actions ("create," "delete"), and objects ("report," "profile"). Helps in standardizing syntax.,User Story, Product Backlog
Similarity Detection,Refinement,Finding duplicate or highly similar user stories in the backlog by comparing their text embeddings. Prevents redundancy and helps consolidate requirements.,Product Backlog, Development Team (during refinement)
Complexity Estimation,Estimation,Analyzing the text of a user story (length, vocabulary, number of entities/verbs, semantic similarity to past complex stories) to provide a preliminary, data-driven estimate (e.g., T-shirt size).,User Story, Sprint Planning, Development Team
Acceptance Criteria Generation,Structuring,Using advanced LLMs to suggest potential acceptance criteria for a user story based on its description, helping the Product Owner and team ensure completeness.,User Story, Definition of Done
Retrospective Analysis,Improvement,Processing qualitative feedback from the retrospective meeting (e.g., "what went well," "what to improve") to identify common themes and suggest actionable items.,Sprint Retrospective, Scrum Team
Sprint Review Sentiment,Feedback Analysis,Analyzing stakeholder feedback during the Sprint Review to quantify satisfaction and extract specific feature requests or concerns automatically.,Sprint Review, Product Owner, Stakeholders
Dependency Detection,Risk Analysis,Identifying potential dependencies between user stories or epics by analyzing the text for shared components, data, or actions (e.g., "story A requires the API from story B").,Product Backlog, Sprint Backlog, Development Team
Standardization,Quality Control,Enforcing a standard format for user stories (e.g., "As a [role], I want [feature], so that [benefit]") by parsing and suggesting corrections to non-conforming entries.,Product Backlog, Product Owner