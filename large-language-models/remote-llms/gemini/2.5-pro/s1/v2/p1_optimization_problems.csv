Rank,Name,Abbreviation,Description,Solvability,Example,Appearances
10,"Linear Programming",LP,"Optimization where the objective function and all constraints are linear functions of the decision variables. Variables are continuous.",Efficiently solvable in polynomial time (e.g., Simplex, Interior-Point methods). Problems can be solved for millions of variables/constraints.,"Resource allocation, diet problem, production planning.",10
9,"Mixed-Integer Linear Programming",MILP / MIP,"An extension of LP where some or all decision variables are restricted to be integers. Binary variables (0 or 1) are a common special case.",NP-hard in general. Solved with methods like Branch and Bound. Practical solvability depends heavily on problem size and structure.,"Facility location, unit commitment, supply chain design.",9
8,"Nonlinear Programming",NLP,"An optimization problem where the objective function or at least one of the constraints is a nonlinear function of the decision variables.",Highly dependent on problem structure. If convex, can often be solved efficiently for a global optimum. If non-convex, finding a global optimum is very difficult; algorithms may only find a local optimum.,"Engineering design, chemical process optimization, parameter estimation.",8
7,"Quadratic Programming",QP,"A type of NLP where the objective function is a quadratic function and the constraints are linear. Variables are continuous.",Efficiently solvable if the objective function is convex. It is a key building block for more complex algorithms.,"Markowitz portfolio optimization (balancing risk and return), support vector machines (SVM) in machine learning.",7
6,"Combinatorial Optimization",CO,"Finding an optimal object from a finite set of objects. The problem space is discrete, often dealing with graphs, permutations, or subsets.",Many problems are NP-hard. Often overlaps with Integer Programming. Solved with exact algorithms, approximation algorithms, or heuristics.,"Traveling Salesperson Problem (TSP), knapsack problem, graph coloring.",6
5,"Dynamic Programming",DP,"A method for solving complex problems by breaking them down into a collection of simpler, overlapping subproblems, solving each subproblem just once, and storing their solutions.",The efficiency depends on the number of subproblems and the structure of the problem. Can be very efficient if applicable.,"Shortest path problems (Dijkstra's, Bellman-Ford), inventory management, sequence alignment.",5
4,"Constraint Programming",CP,"A programming paradigm for solving combinatorial problems. It focuses on feasibility and the relationships (constraints) between variables, rather than a single objective function.",Very effective for problems with complex, logical, or highly restrictive constraints. Often used for feasibility before optimization.,"Employee rostering, detailed job-shop scheduling, configuration problems.",4
3,"Stochastic Programming",SP,"A framework for modeling optimization problems that involve uncertainty. Data is not known for certain and is represented by probability distributions.",Computationally very demanding. Often involves solving many scenarios or using decomposition methods like L-shaped method.,"Capacity planning under demand uncertainty, financial planning with uncertain returns, energy grid management.",3
2,"Multi-Objective Optimization",MOP,"Problems that involve more than one objective function to be optimized simultaneously. The objectives often conflict with each other.",There is no single optimal solution but a set of trade-off solutions known as the Pareto front. Requires specialized algorithms to find or approximate this set.,"Product design (e.g., minimizing cost while maximizing strength), portfolio optimization (e.g., maximizing return while minimizing risk).",2
1,"Semi-Definite Programming",SDP,"A subfield of convex optimization where the variable is a semi-definite matrix. It is a generalization of LP.",Solvable in polynomial time, but interior-point methods are more computationally intensive than for LP. Growing in importance.,"Control theory, finding optimal relaxations for hard combinatorial problems (like Max-Cut).",1