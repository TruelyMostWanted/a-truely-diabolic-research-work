Keyword,Category,Description,RelevantScrumEntities
"Named Entity Recognition (NER)",Requirement Extraction,"Automatically identifies and extracts key domain-specific entities like user roles, system components (e.g., 'API', 'database'), data objects ('customer record'), and UI elements ('login button') from raw text. This helps to quickly catalog the actors and components involved in a requirement.","Product Backlog, User Story, Acceptance Criteria, Bug Reports"
"Keyword & Phrase Extraction",Requirement Extraction,"Pulls out the most frequent and important terms from a body of text. Useful for summarizing the core concepts within a large set of stakeholder feedback or a complex user story.","Sprint Review Feedback, Support Tickets, User Forum Data"
"Relationship Extraction",Requirement Extraction,"Identifies the semantic relationships between entities (e.g., 'User' [submits] 'Form', 'System' [validates] 'Password'). This aids in auto-generating initial data models, sequence diagrams, or identifying dependencies between components.","User Story, Acceptance Criteria, Technical Documentation"
"Topic Modeling",Requirement Structuring,"Analyzes a large collection of documents (like an entire backlog or all feedback from a release) to discover abstract 'topics' or themes. Helps Product Owners identify feature clusters, recurring user problems, or areas needing strategic focus.","Product Backlog, Sprint Review Feedback, Customer Support Logs"
"Text Classification",Requirement Structuring,"Automatically categorizes Product Backlog Items (PBIs) into predefined types like 'Feature', 'Bug', 'Technical Debt', or 'Spike'. Can also classify user feedback by functional area, streamlining the triage process.","Product Backlog, Bug Reports"
"Requirement Clustering / Similarity Analysis",Requirement Structuring,"Groups similar or duplicate User Stories and bug reports together using vector embeddings. This is critical for backlog refinement, helping to merge redundant items and identify closely related work.","Product Backlog, Bug Reports"
"Text Summarization",Requirement Structuring,"Condenses long-form text, such as stakeholder feedback from a Sprint Review or detailed user interview transcripts, into concise summaries for quick consumption by the Product Owner and Developers.","Sprint Review Notes, Retrospective Transcripts, User Interview Notes"
"Sentiment Analysis",Complexity & Quality Evaluation,"Evaluates the emotional tone (positive, negative, neutral) within user feedback, support tickets, or app store reviews. Provides a rapid, quantitative gauge of user satisfaction with a feature or release.","Sprint Review Feedback, Production Monitoring Data, Support Tickets"
"Ambiguity Detection",Complexity & Quality Evaluation,"Scans User Stories and Acceptance Criteria for vague, subjective, or imprecise language (e.g., 'fast', 'user-friendly', 'should handle appropriately'). This flags requirements that are poorly defined and carry a high risk of misinterpretation.","User Story, Acceptance Criteria, Product Backlog Item"
"Readability Scoring",Complexity & Quality Evaluation,"Calculates a score (e.g., Flesch-Kincaid, Gunning fog) to measure how easy a User Story or requirement is to understand. A low score indicates a PBI that is overly complex or jargony and needs simplification during refinement.","User Story, Acceptance Criteria"
"Technical Complexity Estimation",Complexity & Quality Evaluation,"Acts as a proxy for technical complexity by analyzing linguistic features. A story with many distinct technical entities, action verbs, and conditional clauses is likely more complex than a simple one. This can provide an initial, objective input for story point estimation.","Product Backlog, User Story"
"Dependency Inference",Complexity & Quality Evaluation,"Analyzes the text of multiple stories to infer potential dependencies. If Story A mentions 'payment processing' and Story B mentions the 'Payment API', the system can flag a likely dependency that the team should discuss.","Product Backlog, Sprint Backlog"