Keyword,Category,Description,RelevantScrumEntities
"Named Entity Recognition (NER)","Requirement Extraction & Structuring","Automatically identifies and classifies key entities within a user story or requirement text, such as user roles ('Admin'), system components ('Payment Gateway'), actions ('export'), and objects ('PDF report').","Product Backlog Item, User Story, Acceptance Criteria"
"Syntactic Parsing","Requirement Extraction & Structuring","Analyzes the grammatical structure of a sentence to break down requirements into subjects, verbs, and objects. This helps formalize 'who does what to what' and create structured models from plain text.","User Story, Acceptance Criteria"
"Ambiguity Detection","Requirement Quality Analysis","Uses models to identify vague, subjective, or imprecise words (e.g., 'fast', 'user-friendly', 'improved', 'etc.'). This flags requirements that need clarification before Sprint Planning.","User Story, Acceptance Criteria, Definition of Done"
"INVEST Criteria Analysis","Requirement Quality Analysis","Partially automates the evaluation of user stories against the INVEST (Independent, Negotiable, Valuable, Estimable, Small, Testable) criteria. NLP can detect dependencies ('Independent') or identify stories that are too complex ('Small').","Product Backlog, User Story"
"Text Similarity / Duplicate Detection","Requirement Management & Linking","Uses vector embeddings (like BERT or Word2Vec) to compare user stories. This can automatically flag duplicate or highly overlapping requirements in the Product Backlog, reducing redundancy.","Product Backlog"
"Text Complexity Metrics","Complexity & Effort Estimation","Calculates metrics like sentence length, lexical density, and readability scores (e.g., Flesch-Kincaid) on user story descriptions. Higher complexity scores can indicate a potentially higher development effort or risk.","Product Backlog Item, Story Points"
"Feature Similarity Analysis","Complexity & Effort Estimation","Compares a new user story to a historical backlog of completed stories. By finding stories with similar descriptions and technical keywords, the system can suggest a likely range for story points based on past data.","Product Backlog, Story Points"
"Traceability & Dependency Mapping","Requirement Management & Linking","Identifies shared entities and concepts across multiple user stories to automatically suggest potential dependencies. For example, if two stories mention the 'User Profile API', they are likely related.","Product Backlog, Sprint Backlog"
"Sentiment Analysis","Process Improvement & Feedback Analysis","Automatically assesses the sentiment (positive, negative, neutral) of stakeholder feedback from Sprint Reviews, user interviews, or support tickets. This helps the Product Owner prioritize pain points and validate features.","Sprint Review Feedback, Stakeholder Communication"
"Topic Modeling","Process Improvement & Feedback Analysis","Analyzes unstructured text from sources like Sprint Retrospective notes or user feedback forums to discover latent topics or recurring themes (e.g., 'performance issues', 'login problems', 'UI confusion').","Sprint Retrospective, Sprint Review Feedback"
"Acceptance Criteria Extraction","Requirement Extraction & Structuring","Parses user stories or requirement documents to automatically identify and list candidate acceptance criteria, often by looking for specific linguistic patterns (e.g., 'The system must...', 'Verify that...').","User Story, Acceptance Criteria"
"Completeness Checking","Requirement Quality Analysis","Checks if a user story conforms to a standard template (e.g., 'As a <type of user>, I want <some goal>, so that <some reason>'). It can flag stories where parts of the template are missing.","User Story, Product Backlog Item"