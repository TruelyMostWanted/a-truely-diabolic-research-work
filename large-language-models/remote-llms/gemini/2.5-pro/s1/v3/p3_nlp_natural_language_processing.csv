Keyword,Category,Description,RelevantScrumEntities
"Named Entity Recognition (NER)","Requirement Extraction","Automatically identifies and extracts key entities like user roles ('admin'), system components, and business objects from unstructured text like emails, support tickets, or meeting notes.","Product Backlog, Product Backlog Item (PBI), User Story"
"Text Classification","Requirement Extraction","Classifies incoming unstructured text into categories like 'Bug Report', 'Feature Request', or 'Question' to streamline the process of adding new items to the backlog.","Product Backlog"
"User Story Generation","Requirement Structuring","Converts raw requirement descriptions into a structured User Story format ('As a [user], I want [action], so that [benefit]') by identifying the actor, goal, and motivation.","Product Backlog, PBI, User Story"
"Acceptance Criteria Extraction","Requirement Structuring","Parses the description of a PBI to identify and suggest specific, testable conditions (e.g., rules, constraints) that can be formulated as Acceptance Criteria.","PBI, Definition of Done, User Story"
"Ambiguity Detection","Quality & Clarity Evaluation","Scans requirement text for vague, non-specific, or subjective words (e.g., 'improve', 'fast', 'easy', 'etc.') to help the team identify and clarify them during backlog refinement.","Product Backlog, PBI, Definition of Done"
"Duplicate Detection","Quality & Clarity Evaluation","Uses text similarity algorithms (like cosine similarity on text embeddings) to find and flag potentially duplicate or highly overlapping PBIs, helping to keep the Product Backlog clean.","Product Backlog"
"Completeness Check","Quality & Clarity Evaluation","Analyzes a User Story to ensure it contains the essential components: a user/role, an action/goal, and a benefit/motivation. Flags incomplete items for review.","PBI, User Story, Product Backlog Refinement"
"Effort Estimation Models","Complexity & Effort Estimation","Uses machine learning models trained on the text of past PBIs and their final story points to predict the complexity or effort of new items, providing a baseline for planning poker.","PBI, Sprint Planning"
"Topic Modeling","Relationship & Dependency Analysis","Automatically groups PBIs into thematic clusters or epics based on their semantic content, helping the Product Owner to structure the Product Backlog and identify related work.","Product Backlog, Product Roadmap"
"Dependency Identification","Relationship & Dependency Analysis","Analyzes text across multiple PBIs to detect explicit keywords ('depends on', 'requires') or implicit semantic links that suggest a dependency, aiding in ordering the backlog for development.","Product Backlog, Sprint Planning"
"Sentiment Analysis","Feedback Evaluation","Evaluates user feedback from reviews, app stores, or support channels to gauge user sentiment about existing features, which can help prioritize future work.","Product Backlog, Sprint Review"
"Semantic Role Labeling (SRL)","Requirement Structuring","Identifies the predicate-argument structure of a sentence (who did what to whom), which helps in breaking down complex requirements into smaller, more manageable parts or user stories.","PBI, User Story"